#!/opt/bin/perl5

#!/opt/bin/perl5

#!/opt/bin/perl -- -*- perl -*-

########### defaults ##################################################

$sites_file = "sites";

######################################################################### 
#
#                                                         removelastslash
#
# input: a pathname to test
#
# this function will remove a trailing slash from the directory name 
# input
#
######################################################################### 

sub removelastslash{
    if ($_[0] =~ /\/$/) {
        chop $_[0];
    }
} # removelastslash

#########################################################################
#
#                                                        display_sites
# input: none
#
# output: Prints to <stdout> the current contents of the sites file, which 
#         consists of a listing of current package archive sites.
#
#########################################################################

sub display_sites {
    local($i,$numsites);
    undef @sites;  # cleans up output from previous runs
    undef @labels; # ditto
    $i = 1;
    $numsites = 0;
    if (-e $sites_file){  
	open(IN, "$sites_file") || die "Could not create $sites_file";} 
    else {
	open(IN, ">$sites_file") || die "Could not open $sites_file"; }
    
    print"## Current Package Archives ##\n\n";
	
	if (-z IN){
	    print"\t** NONE **\n";
	}
    else {	
	while(<IN>){
	    if (/^\s*(\S*)\s*(\S*)/){
		$labels[$i] = $1;
		$sites[$i] = $2;
		$i++;
		$numsites++;
	    }
	}
	print"Priority  Label      Package Site\n";
	print"-------   -----      ------------\n";
	format STDOUT = 
@|||||    @<<<<<<<<  @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$i,        $labels[$i],  $sites[$i]
.
    
    for ($i = 1; $i < ($numsites + 1); $i++){
	write STDOUT;     
    }
}
} # display_sites

##########################################################################
#
#                                                        add_archive
# input: <STDIN>
#
# output: adds a package to the sites file based on user inputs
#
#
##########################################################################

sub add_archive {
    local($ans,$i);
    print"\nPlease enter the DIRECTORY of the package archive\n";
    print"** Be sure to include all necessary path info including leading slashes\n";
    print"----> ";
    $path = <STDIN>;
    chop($path);
    &removelastslash($path);
    print"Please enter the LABEL which is to be associated with this archive\n"; 
    print"----> ";
    $label = <STDIN>;
    chop($label);
    print"Please enter the PRIORITY NUMBER of the new package archive\n";
    print"** Packages with the lowest priority are usually linked first\n";
    print"----> ";
    $priority = <STDIN>;
    chop($priority);
    print"Directory: $path\n";
    print"Priority:  $priority\n";
    print"Label:     $label\n\n";
    print"Is this information correct?(y/n)";
    $ans = <STDIN>;
    unless ($ans =~ /^y/i) {
	print"Package Archive not added to sites file\n";
	next;
    }
    if (defined $sites[$priority]){
	print"\n** Site $sites[$priority] already exists with that priority\n";
	print"** Do you still wish $path to have priority $priority?(y/n)";
	$ans = <STDIN>;
	unless ($ans =~ /^y/i) { # assume an error was made entering priority
	    print"Package Archive not added to sites file\n";
	    next;
	} else { # no error. give the new one higher priority
	    open(OUT,">$sites_file") || die "Error: Could not write to $sites_file";
	    $i = 0;
	    foreach (@sites){
		if ($i == $priority){
		    print OUT "$label\t$path\n";
		}
		if ($sites[$i] ne ""){  
		    print OUT "$labels[$i]\t$_\n";	    
		}
		$i++;
	    }
	    print"Archive Added\n";
	    close(OUT);
	}
    } else { # if not defined sites
	$sites[$priority] = $path;
	$labels[$priority] = $label;
	open(OUT,">$sites_file") || die "Error: Could not write to $sites_file";
	$i = 0;
	foreach (@sites){
	    if ($sites[$i] ne ""){  
		print OUT "$labels[$i]\t$_\n";	    
	    }
	    $i++;
	}
	print"Archive Added\n";
	close(OUT);
    }
}

##########################################################################
#
#                                                        delete_archive
# input: <STDIN>
#
# output: removes a package from the sites file based on user inputs
#
#
##########################################################################

sub delete_archive{
    local($ans,$remove_me,$i);
    print"\nPlease enter the priority number of the archive to be removed ---> ";
    $remove_me = <STDIN>;
    if (! defined $sites[$remove_me]){
	print"Error: No archive currently exists with priority $remove_me\n";
	return;
    } else {
	print"\nDelete archive $sites[$remove_me]?(y/n)";
	$ans = <STDIN>;
	unless ($ans =~ /^y/i) {
	    print"Package Archive not deleted from sites file\n";
	    next;
	}
	open(OUT,">$sites_file") || die "Error: Could not write to $sites_file";
	$i = 0;
	foreach (@sites){
	    unless ($i == $remove_me){
		print OUT "$labels[$i]\t$_\n" if (defined $sites[$i]);
	    }
	    $i++;
	}
	print"Archive Deleted\n\n";
	close(OUT);
    }
}

#########################################################################
#
#
#                                MAIN            
#
#
#########################################################################

$done = 0;
while (!$done){
    &display_sites;
    print"\nPlease choose an option:\n";
    print"\t[A]dd a package archive to the Archive list\n";
    print"\t[D]elete a package from the Archive list\n";
    print"\t[Q]uit\n\n";
    print"Choice ----> ";
    $choice = <STDIN>;
    if ($choice =~ /^a/i){
	&add_archive; 
    } elsif ($choice =~ /^d/i){
	&delete_archive;
    }
    elsif ($choice =~ /^q/i){
	$done = 1;
    }else {
	print"Invalid option. Please try again\n\n";
    }
}


    
